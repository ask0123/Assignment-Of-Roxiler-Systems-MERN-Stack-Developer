import React, { useState, useEffect } from 'react';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';

const API_BASE_URL = 'http://localhost:3000/api';

const App = () => {
  const [month, setMonth] = useState('March');
  const [searchText, setSearchText] = useState('');
  const [transactions, setTransactions] = useState([]);
  const [statistics, setStatistics] = useState({});
  const [barChartData, setBarChartData] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);

  useEffect(() => {
    fetchData();
  }, [month, searchText, currentPage]);

  const fetchData = async () => {
    try {
      const [transactionsRes, statisticsRes, barChartRes] = await Promise.all([
        fetch(`${API_BASE_URL}/transactions?month=${month}&search=${searchText}&page=${currentPage}`).then(res => res.json()),
        fetch(`${API_BASE_URL}/statistics?month=${month}`).then(res => res.json()),
        fetch(`${API_BASE_URL}/bar-chart?month=${month}`).then(res => res.json())
      ]);

      setTransactions(transactionsRes.transactions);
      setTotalPages(transactionsRes.totalPages);
      setStatistics(statisticsRes);
      setBarChartData(barChartRes);
    } catch (error) {
      console.error('Error fetching data:', error);
    }
  };

  const handleMonthChange = (e) => {
    setMonth(e.target.value);
    setCurrentPage(1);
  };

  const handleSearchChange = (e) => {
    setSearchText(e.target.value);
    setCurrentPage(1);
  };

  const handlePrevPage = () => {
    setCurrentPage((prev) => Math.max(prev - 1, 1));
  };

  const handleNextPage = () => {
    setCurrentPage((prev) => Math.min(prev + 1, totalPages));
  };

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-3xl font-bold mb-4">Transaction Dashboard</h1>
      
      <div className="mb-4">
        <select 
          value={month} 
          onChange={handleMonthChange}
          className="mr-4 p-2 border rounded"
        >
          {['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'].map((m) => (
            <option key={m} value={m}>{m}</option>
          ))}
        </select>
        <input
          type="text"
          value={searchText}
          onChange={handleSearchChange}
          placeholder="Search transactions"
          className="p-2 border rounded"
        />
      </div>

      <div className="grid grid-cols-3 gap-4 mb-4">
        <div className="bg-blue-100 p-4 rounded">
          <h3 className="font-bold">Total Sale Amount</h3>
          <p>${statistics.totalSaleAmount?.toFixed(2)}</p>
        </div>
        <div className="bg-green-100 p-4 rounded">
          <h3 className="font-bold">Total Sold Items</h3>
          <p>{statistics.soldItems}</p>
        </div>
        <div className="bg-red-100 p-4 rounded">
          <h3 className="font-bold">Total Not Sold Items</h3>
          <p>{statistics.notSoldItems}</p>
        </div>
      </div>

      <table className="w-full mb-4">
        <thead>
          <tr>
            <th className="border p-2">ID</th>
            <th className="border p-2">Title</th>
            <th className="border p-2">Description</th>
            <th className="border p-2">Price</th>
            <th className="border p-2">Category</th>
            <th className="border p-2">Sold</th>
            <th className="border p-2">Date of Sale</th>
          </tr>
        </thead>
        <tbody>
          {transactions.map((transaction) => (
            <tr key={transaction.id}>
              <td className="border p-2">{transaction.id}</td>
              <td className="border p-2">{transaction.title}</td>
              <td className="border p-2">{transaction.description}</td>
              <td className="border p-2">${transaction.price.toFixed(2)}</td>
              <td className="border p-2">{transaction.category}</td>
              <td className="border p-2">{transaction.sold ? 'Yes' : 'No'}</td>
              <td className="border p-2">{new Date(transaction.dateOfSale).toLocaleDateString()}</td>
            </tr>
          ))}
        </tbody>
      </table>

      <div className="flex justify-between mb-4">
        <button 
          onClick={handlePrevPage} 
          disabled={currentPage === 1}
          className="bg-blue-500 text-white px-4 py-2 rounded disabled:bg-gray-300"
        >
          Previous
        </button>
        <span>Page {currentPage} of {totalPages}</span>
        <button 
          onClick={handleNextPage} 
          disabled={currentPage === totalPages}
          className="bg-blue-500 text-white px-4 py-2 rounded disabled:bg-gray-300"
        >
          Next
        </button>
      </div>

      <h2 className="text-2xl font-bold mb-4">Price Range Distribution</h2>
      <BarChart width={600} height={300} data={barChartData}>
        <CartesianGrid strokeDasharray="3 3" />
        <XAxis dataKey="range" />
        <YAxis />
        <Tooltip />
        <Legend />
        <Bar dataKey="count" fill="#8884d8" />
      </BarChart>
    </div>
  );
};

export default App;
